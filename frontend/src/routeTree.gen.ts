/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PathlessLayoutRouteRouteImport } from './routes/_pathlessLayout/route'
import { Route as PathlessLayoutIndexRouteImport } from './routes/_pathlessLayout/index'
import { Route as PathlessLayoutSessionsRouteImport } from './routes/_pathlessLayout/sessions'
import { Route as PathlessLayoutSecurityRouteImport } from './routes/_pathlessLayout/security'
import { Route as PathlessLayoutMeRouteImport } from './routes/_pathlessLayout/me'
import { Route as PathlessLayoutDevicesRouteImport } from './routes/_pathlessLayout/devices'
import { Route as PathlessLayoutAuditLogsRouteImport } from './routes/_pathlessLayout/audit-logs'
import { Route as authResetPasswordRouteImport } from './routes/(auth)/reset-password'
import { Route as authRequestPasswordResetRouteImport } from './routes/(auth)/request-password-reset'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authOauthCallbackRouteImport } from './routes/(auth)/oauth-callback'
import { Route as authLoginRouteImport } from './routes/(auth)/login'

const PathlessLayoutRouteRoute = PathlessLayoutRouteRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutIndexRoute = PathlessLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutSessionsRoute = PathlessLayoutSessionsRouteImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutSecurityRoute = PathlessLayoutSecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutMeRoute = PathlessLayoutMeRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutDevicesRoute = PathlessLayoutDevicesRouteImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutAuditLogsRoute = PathlessLayoutAuditLogsRouteImport.update({
  id: '/audit-logs',
  path: '/audit-logs',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const authResetPasswordRoute = authResetPasswordRouteImport.update({
  id: '/(auth)/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const authRequestPasswordResetRoute =
  authRequestPasswordResetRouteImport.update({
    id: '/(auth)/request-password-reset',
    path: '/request-password-reset',
    getParentRoute: () => rootRouteImport,
  } as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authOauthCallbackRoute = authOauthCallbackRouteImport.update({
  id: '/(auth)/oauth-callback',
  path: '/oauth-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof authLoginRoute
  '/oauth-callback': typeof authOauthCallbackRoute
  '/register': typeof authRegisterRoute
  '/request-password-reset': typeof authRequestPasswordResetRoute
  '/reset-password': typeof authResetPasswordRoute
  '/audit-logs': typeof PathlessLayoutAuditLogsRoute
  '/devices': typeof PathlessLayoutDevicesRoute
  '/me': typeof PathlessLayoutMeRoute
  '/security': typeof PathlessLayoutSecurityRoute
  '/sessions': typeof PathlessLayoutSessionsRoute
  '/': typeof PathlessLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof authLoginRoute
  '/oauth-callback': typeof authOauthCallbackRoute
  '/register': typeof authRegisterRoute
  '/request-password-reset': typeof authRequestPasswordResetRoute
  '/reset-password': typeof authResetPasswordRoute
  '/audit-logs': typeof PathlessLayoutAuditLogsRoute
  '/devices': typeof PathlessLayoutDevicesRoute
  '/me': typeof PathlessLayoutMeRoute
  '/security': typeof PathlessLayoutSecurityRoute
  '/sessions': typeof PathlessLayoutSessionsRoute
  '/': typeof PathlessLayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_pathlessLayout': typeof PathlessLayoutRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/oauth-callback': typeof authOauthCallbackRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(auth)/request-password-reset': typeof authRequestPasswordResetRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/_pathlessLayout/audit-logs': typeof PathlessLayoutAuditLogsRoute
  '/_pathlessLayout/devices': typeof PathlessLayoutDevicesRoute
  '/_pathlessLayout/me': typeof PathlessLayoutMeRoute
  '/_pathlessLayout/security': typeof PathlessLayoutSecurityRoute
  '/_pathlessLayout/sessions': typeof PathlessLayoutSessionsRoute
  '/_pathlessLayout/': typeof PathlessLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/oauth-callback'
    | '/register'
    | '/request-password-reset'
    | '/reset-password'
    | '/audit-logs'
    | '/devices'
    | '/me'
    | '/security'
    | '/sessions'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/oauth-callback'
    | '/register'
    | '/request-password-reset'
    | '/reset-password'
    | '/audit-logs'
    | '/devices'
    | '/me'
    | '/security'
    | '/sessions'
    | '/'
  id:
    | '__root__'
    | '/_pathlessLayout'
    | '/(auth)/login'
    | '/(auth)/oauth-callback'
    | '/(auth)/register'
    | '/(auth)/request-password-reset'
    | '/(auth)/reset-password'
    | '/_pathlessLayout/audit-logs'
    | '/_pathlessLayout/devices'
    | '/_pathlessLayout/me'
    | '/_pathlessLayout/security'
    | '/_pathlessLayout/sessions'
    | '/_pathlessLayout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PathlessLayoutRouteRoute: typeof PathlessLayoutRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authOauthCallbackRoute: typeof authOauthCallbackRoute
  authRegisterRoute: typeof authRegisterRoute
  authRequestPasswordResetRoute: typeof authRequestPasswordResetRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/': {
      id: '/_pathlessLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PathlessLayoutIndexRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/sessions': {
      id: '/_pathlessLayout/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof PathlessLayoutSessionsRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/security': {
      id: '/_pathlessLayout/security'
      path: '/security'
      fullPath: '/security'
      preLoaderRoute: typeof PathlessLayoutSecurityRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/me': {
      id: '/_pathlessLayout/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof PathlessLayoutMeRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/devices': {
      id: '/_pathlessLayout/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof PathlessLayoutDevicesRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/audit-logs': {
      id: '/_pathlessLayout/audit-logs'
      path: '/audit-logs'
      fullPath: '/audit-logs'
      preLoaderRoute: typeof PathlessLayoutAuditLogsRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/request-password-reset': {
      id: '/(auth)/request-password-reset'
      path: '/request-password-reset'
      fullPath: '/request-password-reset'
      preLoaderRoute: typeof authRequestPasswordResetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/oauth-callback': {
      id: '/(auth)/oauth-callback'
      path: '/oauth-callback'
      fullPath: '/oauth-callback'
      preLoaderRoute: typeof authOauthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface PathlessLayoutRouteRouteChildren {
  PathlessLayoutAuditLogsRoute: typeof PathlessLayoutAuditLogsRoute
  PathlessLayoutDevicesRoute: typeof PathlessLayoutDevicesRoute
  PathlessLayoutMeRoute: typeof PathlessLayoutMeRoute
  PathlessLayoutSecurityRoute: typeof PathlessLayoutSecurityRoute
  PathlessLayoutSessionsRoute: typeof PathlessLayoutSessionsRoute
  PathlessLayoutIndexRoute: typeof PathlessLayoutIndexRoute
}

const PathlessLayoutRouteRouteChildren: PathlessLayoutRouteRouteChildren = {
  PathlessLayoutAuditLogsRoute: PathlessLayoutAuditLogsRoute,
  PathlessLayoutDevicesRoute: PathlessLayoutDevicesRoute,
  PathlessLayoutMeRoute: PathlessLayoutMeRoute,
  PathlessLayoutSecurityRoute: PathlessLayoutSecurityRoute,
  PathlessLayoutSessionsRoute: PathlessLayoutSessionsRoute,
  PathlessLayoutIndexRoute: PathlessLayoutIndexRoute,
}

const PathlessLayoutRouteRouteWithChildren =
  PathlessLayoutRouteRoute._addFileChildren(PathlessLayoutRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PathlessLayoutRouteRoute: PathlessLayoutRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authOauthCallbackRoute: authOauthCallbackRoute,
  authRegisterRoute: authRegisterRoute,
  authRequestPasswordResetRoute: authRequestPasswordResetRoute,
  authResetPasswordRoute: authResetPasswordRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
