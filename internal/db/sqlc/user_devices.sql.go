// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_devices.sql

package db

import (
	"context"
	"net/netip"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserDevice = `-- name: CreateUserDevice :one
INSERT INTO user_devices (
    user_id,
    device_id,
    device_name,
    device_type,
    user_agent,
    ip_address,
    trusted
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, device_id, device_name, device_type, user_agent, ip_address, trusted, last_used_at, created_at
`

type CreateUserDeviceParams struct {
	UserID     int64       `json:"user_id"`
	DeviceID   string      `json:"device_id"`
	DeviceName pgtype.Text `json:"device_name"`
	DeviceType pgtype.Text `json:"device_type"`
	UserAgent  *string     `json:"user_agent"`
	IpAddress  *netip.Addr `json:"ip_address"`
	Trusted    pgtype.Bool `json:"trusted"`
}

func (q *Queries) CreateUserDevice(ctx context.Context, arg CreateUserDeviceParams) (UserDevice, error) {
	row := q.db.QueryRow(ctx, createUserDevice,
		arg.UserID,
		arg.DeviceID,
		arg.DeviceName,
		arg.DeviceType,
		arg.UserAgent,
		arg.IpAddress,
		arg.Trusted,
	)
	var i UserDevice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.DeviceName,
		&i.DeviceType,
		&i.UserAgent,
		&i.IpAddress,
		&i.Trusted,
		&i.LastUsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllUserDevices = `-- name: DeleteAllUserDevices :exec
DELETE FROM user_devices
WHERE user_id = $1
`

func (q *Queries) DeleteAllUserDevices(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteAllUserDevices, userID)
	return err
}

const deleteUserDevice = `-- name: DeleteUserDevice :exec
DELETE FROM user_devices
WHERE id = $1 AND user_id = $2
`

type DeleteUserDeviceParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteUserDevice(ctx context.Context, arg DeleteUserDeviceParams) error {
	_, err := q.db.Exec(ctx, deleteUserDevice, arg.ID, arg.UserID)
	return err
}

const getUserDeviceByDeviceID = `-- name: GetUserDeviceByDeviceID :one
SELECT id, user_id, device_id, device_name, device_type, user_agent, ip_address, trusted, last_used_at, created_at FROM user_devices
WHERE user_id = $1 AND device_id = $2
`

type GetUserDeviceByDeviceIDParams struct {
	UserID   int64  `json:"user_id"`
	DeviceID string `json:"device_id"`
}

func (q *Queries) GetUserDeviceByDeviceID(ctx context.Context, arg GetUserDeviceByDeviceIDParams) (UserDevice, error) {
	row := q.db.QueryRow(ctx, getUserDeviceByDeviceID, arg.UserID, arg.DeviceID)
	var i UserDevice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.DeviceName,
		&i.DeviceType,
		&i.UserAgent,
		&i.IpAddress,
		&i.Trusted,
		&i.LastUsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserDeviceByID = `-- name: GetUserDeviceByID :one
SELECT id, user_id, device_id, device_name, device_type, user_agent, ip_address, trusted, last_used_at, created_at FROM user_devices
WHERE id = $1 AND user_id = $2
`

type GetUserDeviceByIDParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetUserDeviceByID(ctx context.Context, arg GetUserDeviceByIDParams) (UserDevice, error) {
	row := q.db.QueryRow(ctx, getUserDeviceByID, arg.ID, arg.UserID)
	var i UserDevice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.DeviceName,
		&i.DeviceType,
		&i.UserAgent,
		&i.IpAddress,
		&i.Trusted,
		&i.LastUsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserDevicesByUserID = `-- name: GetUserDevicesByUserID :many
SELECT id, user_id, device_id, device_name, device_type, user_agent, ip_address, trusted, last_used_at, created_at FROM user_devices
WHERE user_id = $1
ORDER BY last_used_at DESC
`

func (q *Queries) GetUserDevicesByUserID(ctx context.Context, userID int64) ([]UserDevice, error) {
	rows, err := q.db.Query(ctx, getUserDevicesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserDevice{}
	for rows.Next() {
		var i UserDevice
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceID,
			&i.DeviceName,
			&i.DeviceType,
			&i.UserAgent,
			&i.IpAddress,
			&i.Trusted,
			&i.LastUsedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markDeviceAsTrusted = `-- name: MarkDeviceAsTrusted :one
UPDATE user_devices
SET trusted = $3
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, device_id, device_name, device_type, user_agent, ip_address, trusted, last_used_at, created_at
`

type MarkDeviceAsTrustedParams struct {
	ID      int64       `json:"id"`
	UserID  int64       `json:"user_id"`
	Trusted pgtype.Bool `json:"trusted"`
}

func (q *Queries) MarkDeviceAsTrusted(ctx context.Context, arg MarkDeviceAsTrustedParams) (UserDevice, error) {
	row := q.db.QueryRow(ctx, markDeviceAsTrusted, arg.ID, arg.UserID, arg.Trusted)
	var i UserDevice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.DeviceName,
		&i.DeviceType,
		&i.UserAgent,
		&i.IpAddress,
		&i.Trusted,
		&i.LastUsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserDevice = `-- name: UpdateUserDevice :one
UPDATE user_devices
SET device_name = $3,
    device_type = $4,
    user_agent = $5,
    trusted = $6
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, device_id, device_name, device_type, user_agent, ip_address, trusted, last_used_at, created_at
`

type UpdateUserDeviceParams struct {
	ID         int64       `json:"id"`
	UserID     int64       `json:"user_id"`
	DeviceName pgtype.Text `json:"device_name"`
	DeviceType pgtype.Text `json:"device_type"`
	UserAgent  *string     `json:"user_agent"`
	Trusted    pgtype.Bool `json:"trusted"`
}

func (q *Queries) UpdateUserDevice(ctx context.Context, arg UpdateUserDeviceParams) (UserDevice, error) {
	row := q.db.QueryRow(ctx, updateUserDevice,
		arg.ID,
		arg.UserID,
		arg.DeviceName,
		arg.DeviceType,
		arg.UserAgent,
		arg.Trusted,
	)
	var i UserDevice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.DeviceName,
		&i.DeviceType,
		&i.UserAgent,
		&i.IpAddress,
		&i.Trusted,
		&i.LastUsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserDeviceLastUsed = `-- name: UpdateUserDeviceLastUsed :one
UPDATE user_devices
SET last_used_at = $2
WHERE id = $1
RETURNING id, user_id, device_id, device_name, device_type, user_agent, ip_address, trusted, last_used_at, created_at
`

type UpdateUserDeviceLastUsedParams struct {
	ID         int64      `json:"id"`
	LastUsedAt *time.Time `json:"last_used_at"`
}

func (q *Queries) UpdateUserDeviceLastUsed(ctx context.Context, arg UpdateUserDeviceLastUsedParams) (UserDevice, error) {
	row := q.db.QueryRow(ctx, updateUserDeviceLastUsed, arg.ID, arg.LastUsedAt)
	var i UserDevice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceID,
		&i.DeviceName,
		&i.DeviceType,
		&i.UserAgent,
		&i.IpAddress,
		&i.Trusted,
		&i.LastUsedAt,
		&i.CreatedAt,
	)
	return i, err
}
