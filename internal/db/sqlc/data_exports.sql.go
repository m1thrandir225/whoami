// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: data_exports.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDataExport = `-- name: CreateDataExport :one
INSERT INTO data_exports (
    user_id,
    export_type,
    status,
    expires_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, export_type, status, file_path, file_size, expires_at, created_at, completed_at
`

type CreateDataExportParams struct {
	UserID     int64     `json:"user_id"`
	ExportType string    `json:"export_type"`
	Status     string    `json:"status"`
	ExpiresAt  time.Time `json:"expires_at"`
}

func (q *Queries) CreateDataExport(ctx context.Context, arg CreateDataExportParams) (DataExport, error) {
	row := q.db.QueryRow(ctx, createDataExport,
		arg.UserID,
		arg.ExportType,
		arg.Status,
		arg.ExpiresAt,
	)
	var i DataExport
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExportType,
		&i.Status,
		&i.FilePath,
		&i.FileSize,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const deleteDataExport = `-- name: DeleteDataExport :exec
DELETE FROM data_exports
WHERE id = $1 AND user_id = $2
`

type DeleteDataExportParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteDataExport(ctx context.Context, arg DeleteDataExportParams) error {
	_, err := q.db.Exec(ctx, deleteDataExport, arg.ID, arg.UserID)
	return err
}

const deleteExpiredDataExports = `-- name: DeleteExpiredDataExports :exec
DELETE FROM data_exports
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredDataExports(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredDataExports)
	return err
}

const getDataExportByID = `-- name: GetDataExportByID :one
SELECT id, user_id, export_type, status, file_path, file_size, expires_at, created_at, completed_at FROM data_exports
WHERE id = $1 AND user_id = $2
`

type GetDataExportByIDParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetDataExportByID(ctx context.Context, arg GetDataExportByIDParams) (DataExport, error) {
	row := q.db.QueryRow(ctx, getDataExportByID, arg.ID, arg.UserID)
	var i DataExport
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExportType,
		&i.Status,
		&i.FilePath,
		&i.FileSize,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getDataExportsByUserID = `-- name: GetDataExportsByUserID :many
SELECT id, user_id, export_type, status, file_path, file_size, expires_at, created_at, completed_at FROM data_exports
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetDataExportsByUserID(ctx context.Context, userID int64) ([]DataExport, error) {
	rows, err := q.db.Query(ctx, getDataExportsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataExport{}
	for rows.Next() {
		var i DataExport
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ExportType,
			&i.Status,
			&i.FilePath,
			&i.FileSize,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingDataExports = `-- name: GetPendingDataExports :many
SELECT id, user_id, export_type, status, file_path, file_size, expires_at, created_at, completed_at FROM data_exports
WHERE status = 'pending'
ORDER BY created_at ASC
`

func (q *Queries) GetPendingDataExports(ctx context.Context) ([]DataExport, error) {
	rows, err := q.db.Query(ctx, getPendingDataExports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataExport{}
	for rows.Next() {
		var i DataExport
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ExportType,
			&i.Status,
			&i.FilePath,
			&i.FileSize,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataExportFile = `-- name: UpdateDataExportFile :one
UPDATE data_exports
SET file_path = $2,
    file_size = $3
WHERE id = $1 AND user_id = $4
RETURNING id, user_id, export_type, status, file_path, file_size, expires_at, created_at, completed_at
`

type UpdateDataExportFileParams struct {
	ID       int64       `json:"id"`
	FilePath pgtype.Text `json:"file_path"`
	FileSize pgtype.Int8 `json:"file_size"`
	UserID   int64       `json:"user_id"`
}

func (q *Queries) UpdateDataExportFile(ctx context.Context, arg UpdateDataExportFileParams) (DataExport, error) {
	row := q.db.QueryRow(ctx, updateDataExportFile,
		arg.ID,
		arg.FilePath,
		arg.FileSize,
		arg.UserID,
	)
	var i DataExport
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExportType,
		&i.Status,
		&i.FilePath,
		&i.FileSize,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateDataExportStatus = `-- name: UpdateDataExportStatus :one
UPDATE data_exports
SET status = $2::text,
    completed_at = CASE WHEN $2::text = 'completed' THEN NOW() ELSE completed_at END
WHERE id = $1 AND user_id = $3
RETURNING id, user_id, export_type, status, file_path, file_size, expires_at, created_at, completed_at
`

type UpdateDataExportStatusParams struct {
	ID      int64  `json:"id"`
	Column2 string `json:"column_2"`
	UserID  int64  `json:"user_id"`
}

func (q *Queries) UpdateDataExportStatus(ctx context.Context, arg UpdateDataExportStatusParams) (DataExport, error) {
	row := q.db.QueryRow(ctx, updateDataExportStatus, arg.ID, arg.Column2, arg.UserID)
	var i DataExport
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExportType,
		&i.Status,
		&i.FilePath,
		&i.FileSize,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}
