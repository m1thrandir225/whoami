// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email_verification.sql

package db

import (
	"context"
	"time"
)

const createEmailVerification = `-- name: CreateEmailVerification :one
INSERT INTO email_verifications (
    user_id,
    token_hash,
    expires_at
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, token_hash, expires_at, created_at, used_at
`

type CreateEmailVerificationParams struct {
	UserID    int64     `json:"user_id"`
	TokenHash string    `json:"token_hash"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateEmailVerification(ctx context.Context, arg CreateEmailVerificationParams) (EmailVerification, error) {
	row := q.db.QueryRow(ctx, createEmailVerification, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const deleteUnverifiedTokens = `-- name: DeleteUnverifiedTokens :exec
DELETE FROM email_verifications
WHERE user_id = $1
AND used_at IS NULL
`

func (q *Queries) DeleteUnverifiedTokens(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUnverifiedTokens, userID)
	return err
}

const getEmailVerificationByToken = `-- name: GetEmailVerificationByToken :one
SELECT id, user_id, token_hash, expires_at, created_at, used_at FROM email_verifications
WHERE token_hash = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetEmailVerificationByToken(ctx context.Context, tokenHash string) (EmailVerification, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationByToken, tokenHash)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const getUnverifiedVerifications = `-- name: GetUnverifiedVerifications :many
SELECT id, user_id, token_hash, expires_at, created_at, used_at FROM email_verifications
WHERE user_id = $1
AND used_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetUnverifiedVerifications(ctx context.Context, userID int64) ([]EmailVerification, error) {
	rows, err := q.db.Query(ctx, getUnverifiedVerifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmailVerification{}
	for rows.Next() {
		var i EmailVerification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TokenHash,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEmailVerificationAsUsed = `-- name: MarkEmailVerificationAsUsed :exec
UPDATE email_verifications
SET used_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkEmailVerificationAsUsed(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, markEmailVerificationAsUsed, id)
	return err
}
