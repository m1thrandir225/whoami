// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: password_resets.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordReset = `-- name: CreatePasswordReset :one
INSERT INTO password_resets (
    user_id,
    token_hash,
    hotp_secret,
    counter,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, token_hash, hotp_secret, counter, expires_at, created_at, used_at
`

type CreatePasswordResetParams struct {
	UserID     int64       `json:"user_id"`
	TokenHash  string      `json:"token_hash"`
	HotpSecret string      `json:"hotp_secret"`
	Counter    pgtype.Int8 `json:"counter"`
	ExpiresAt  time.Time   `json:"expires_at"`
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, createPasswordReset,
		arg.UserID,
		arg.TokenHash,
		arg.HotpSecret,
		arg.Counter,
		arg.ExpiresAt,
	)
	var i PasswordReset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.HotpSecret,
		&i.Counter,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const deleteUnusedPasswordResets = `-- name: DeleteUnusedPasswordResets :exec
DELETE FROM password_resets
WHERE user_id = $1
AND used_at IS NULL
`

func (q *Queries) DeleteUnusedPasswordResets(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUnusedPasswordResets, userID)
	return err
}

const getPasswordResetByToken = `-- name: GetPasswordResetByToken :one
SELECT id, user_id, token_hash, hotp_secret, counter, expires_at, created_at, used_at FROM password_resets
WHERE token_hash = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetPasswordResetByToken(ctx context.Context, tokenHash string) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, getPasswordResetByToken, tokenHash)
	var i PasswordReset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.HotpSecret,
		&i.Counter,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const getUnusedPasswordResets = `-- name: GetUnusedPasswordResets :many
SELECT id, user_id, token_hash, hotp_secret, counter, expires_at, created_at, used_at FROM password_resets
WHERE user_id = $1
AND used_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetUnusedPasswordResets(ctx context.Context, userID int64) ([]PasswordReset, error) {
	rows, err := q.db.Query(ctx, getUnusedPasswordResets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PasswordReset{}
	for rows.Next() {
		var i PasswordReset
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TokenHash,
			&i.HotpSecret,
			&i.Counter,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markPasswordResetAsUsed = `-- name: MarkPasswordResetAsUsed :exec
UPDATE password_resets
SET used_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkPasswordResetAsUsed(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, markPasswordResetAsUsed, id)
	return err
}
