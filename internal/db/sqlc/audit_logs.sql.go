// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: audit_logs.sql

package db

import (
	"context"
	"net/netip"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_logs (
    user_id,
    action,
    resource_type,
    resource_id,
    ip_address,
    user_agent,
    details
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, action, resource_type, resource_id, ip_address, user_agent, details, created_at
`

type CreateAuditLogParams struct {
	UserID       pgtype.Int8 `json:"user_id"`
	Action       string      `json:"action"`
	ResourceType pgtype.Text `json:"resource_type"`
	ResourceID   pgtype.Int8 `json:"resource_id"`
	IpAddress    *netip.Addr `json:"ip_address"`
	UserAgent    string      `json:"user_agent"`
	Details      []byte      `json:"details"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.UserID,
		arg.Action,
		arg.ResourceType,
		arg.ResourceID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Details,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.ResourceType,
		&i.ResourceID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Details,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOldAuditLogs = `-- name: DeleteOldAuditLogs :exec
DELETE FROM audit_logs
WHERE created_at < NOW() - INTERVAL '90 days'
`

func (q *Queries) DeleteOldAuditLogs(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteOldAuditLogs)
	return err
}

const getAuditLogsByAction = `-- name: GetAuditLogsByAction :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, details, created_at FROM audit_logs
WHERE action = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetAuditLogsByActionParams struct {
	Action string `json:"action"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) GetAuditLogsByAction(ctx context.Context, arg GetAuditLogsByActionParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByAction, arg.Action, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByDateRange = `-- name: GetAuditLogsByDateRange :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, details, created_at FROM audit_logs
WHERE created_at BETWEEN $1 AND $2
ORDER BY created_at DESC
LIMIT $3
`

type GetAuditLogsByDateRangeParams struct {
	CreatedAt   *time.Time `json:"created_at"`
	CreatedAt_2 *time.Time `json:"created_at_2"`
	Limit       int32      `json:"limit"`
}

func (q *Queries) GetAuditLogsByDateRange(ctx context.Context, arg GetAuditLogsByDateRangeParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByDateRange, arg.CreatedAt, arg.CreatedAt_2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByIP = `-- name: GetAuditLogsByIP :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, details, created_at FROM audit_logs
WHERE ip_address = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetAuditLogsByIPParams struct {
	IpAddress *netip.Addr `json:"ip_address"`
	Limit     int32       `json:"limit"`
}

func (q *Queries) GetAuditLogsByIP(ctx context.Context, arg GetAuditLogsByIPParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByIP, arg.IpAddress, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByResourceID = `-- name: GetAuditLogsByResourceID :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, details, created_at FROM audit_logs
WHERE resource_type = $1 AND resource_id = $2
ORDER BY created_at DESC
LIMIT $3
`

type GetAuditLogsByResourceIDParams struct {
	ResourceType pgtype.Text `json:"resource_type"`
	ResourceID   pgtype.Int8 `json:"resource_id"`
	Limit        int32       `json:"limit"`
}

func (q *Queries) GetAuditLogsByResourceID(ctx context.Context, arg GetAuditLogsByResourceIDParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByResourceID, arg.ResourceType, arg.ResourceID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByResourceType = `-- name: GetAuditLogsByResourceType :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, details, created_at FROM audit_logs
WHERE resource_type = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetAuditLogsByResourceTypeParams struct {
	ResourceType pgtype.Text `json:"resource_type"`
	Limit        int32       `json:"limit"`
}

func (q *Queries) GetAuditLogsByResourceType(ctx context.Context, arg GetAuditLogsByResourceTypeParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByResourceType, arg.ResourceType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByUserID = `-- name: GetAuditLogsByUserID :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, details, created_at FROM audit_logs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetAuditLogsByUserIDParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) GetAuditLogsByUserID(ctx context.Context, arg GetAuditLogsByUserIDParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentAuditLogs = `-- name: GetRecentAuditLogs :many
SELECT id, user_id, action, resource_type, resource_id, ip_address, user_agent, details, created_at FROM audit_logs
WHERE created_at > NOW() - INTERVAL '24 hours'
ORDER BY created_at DESC
LIMIT $1
`

func (q *Queries) GetRecentAuditLogs(ctx context.Context, limit int32) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getRecentAuditLogs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
