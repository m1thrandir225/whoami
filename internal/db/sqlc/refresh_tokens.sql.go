// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanupExpiredRefreshTokens = `-- name: CleanupExpiredRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE expires_at < NOW()
`

func (q *Queries) CleanupExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupExpiredRefreshTokens)
	return err
}

const createRefreshToken = `-- name: CreateRefreshToken :one

INSERT INTO refresh_tokens (
  user_id,
  token_hash,
  device_info,
  expires_at
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, user_id, token_hash, device_info, expires_at, created_at, revoked_at, last_used_at
`

type CreateRefreshTokenParams struct {
	UserID     int64              `json:"user_id"`
	TokenHash  string             `json:"token_hash"`
	DeviceInfo []byte             `json:"device_info"`
	ExpiresAt  pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.UserID,
		arg.TokenHash,
		arg.DeviceInfo,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.DeviceInfo,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getActiveRefreshTokensByUser = `-- name: GetActiveRefreshTokensByUser :many
SELECT id, user_id, token_hash, device_info, expires_at, created_at, revoked_at, last_used_at FROM refresh_tokens
WHERE user_id = $1 AND expires_at > NOW() AND revoked_at IS NULL 
ORDER BY created_at DESC
`

func (q *Queries) GetActiveRefreshTokensByUser(ctx context.Context, userID int64) ([]RefreshToken, error) {
	rows, err := q.db.Query(ctx, getActiveRefreshTokensByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RefreshToken{}
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TokenHash,
			&i.DeviceInfo,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.RevokedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, user_id, token_hash, device_info, expires_at, created_at, revoked_at, last_used_at FROM refresh_tokens 
WHERE token_hash = $1 AND expires_at > NOW() and revoked_at IS NULL
`

func (q *Queries) GetRefreshToken(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.DeviceInfo,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.RevokedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const revokeAllUserRefreshTokens = `-- name: RevokeAllUserRefreshTokens :exec
UPDATE refresh_tokens
SET revoked_at = NOW()
WHERE user_id = $1 AND revoked_at IS NULL
`

func (q *Queries) RevokeAllUserRefreshTokens(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, revokeAllUserRefreshTokens, userID)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = NOW()
WHERE token_hash = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.Exec(ctx, revokeRefreshToken, tokenHash)
	return err
}

const updateRefreshTokenLastUsed = `-- name: UpdateRefreshTokenLastUsed :exec
UPDATE refresh_tokens
SET last_used_at = NOW()
WHERE token_hash = $1
`

func (q *Queries) UpdateRefreshTokenLastUsed(ctx context.Context, tokenHash string) error {
	_, err := q.db.Exec(ctx, updateRefreshTokenLastUsed, tokenHash)
	return err
}
