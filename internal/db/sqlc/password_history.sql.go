// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: password_history.sql

package db

import (
	"context"
	"time"
)

const checkPasswordInHistory = `-- name: CheckPasswordInHistory :one
SELECT COUNT(*) FROM password_history
WHERE user_id = $1
AND password_hash = $2
`

type CheckPasswordInHistoryParams struct {
	UserID       int64  `json:"user_id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CheckPasswordInHistory(ctx context.Context, arg CheckPasswordInHistoryParams) (int64, error) {
	row := q.db.QueryRow(ctx, checkPasswordInHistory, arg.UserID, arg.PasswordHash)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPasswordHistory = `-- name: CreatePasswordHistory :one
INSERT INTO password_history (
    user_id,
    password_hash,
    created_at
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, password_hash, created_at
`

type CreatePasswordHistoryParams struct {
	UserID       int64      `json:"user_id"`
	PasswordHash string     `json:"password_hash"`
	CreatedAt    *time.Time `json:"created_at"`
}

func (q *Queries) CreatePasswordHistory(ctx context.Context, arg CreatePasswordHistoryParams) (PasswordHistory, error) {
	row := q.db.QueryRow(ctx, createPasswordHistory, arg.UserID, arg.PasswordHash, arg.CreatedAt)
	var i PasswordHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOldPasswordHistory = `-- name: DeleteOldPasswordHistory :exec
DELETE FROM password_history
WHERE user_id = $1
AND created_at < NOW() - INTERVAL '1 year'
`

func (q *Queries) DeleteOldPasswordHistory(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteOldPasswordHistory, userID)
	return err
}

const getPasswordHistoryByUserID = `-- name: GetPasswordHistoryByUserID :many
SELECT id, user_id, password_hash, created_at FROM password_history
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetPasswordHistoryByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetPasswordHistoryByUserID(ctx context.Context, arg GetPasswordHistoryByUserIDParams) ([]PasswordHistory, error) {
	rows, err := q.db.Query(ctx, getPasswordHistoryByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PasswordHistory{}
	for rows.Next() {
		var i PasswordHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PasswordHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
