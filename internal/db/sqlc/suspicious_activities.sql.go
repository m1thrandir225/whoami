// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: suspicious_activities.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSuspiciousActivity = `-- name: CreateSuspiciousActivity :one
INSERT INTO suspicious_activities (
    user_id,
    activity_type,
    ip_address,
    user_agent,
    description,
    metadata,
    severity
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, activity_type, ip_address, user_agent, description, metadata, severity, resolved, created_at
`

type CreateSuspiciousActivityParams struct {
	UserID       pgtype.Int8 `json:"user_id"`
	ActivityType string      `json:"activity_type"`
	IpAddress    netip.Addr  `json:"ip_address"`
	UserAgent    *string     `json:"user_agent"`
	Description  pgtype.Text `json:"description"`
	Metadata     []byte      `json:"metadata"`
	Severity     pgtype.Text `json:"severity"`
}

func (q *Queries) CreateSuspiciousActivity(ctx context.Context, arg CreateSuspiciousActivityParams) (SuspiciousActivity, error) {
	row := q.db.QueryRow(ctx, createSuspiciousActivity,
		arg.UserID,
		arg.ActivityType,
		arg.IpAddress,
		arg.UserAgent,
		arg.Description,
		arg.Metadata,
		arg.Severity,
	)
	var i SuspiciousActivity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivityType,
		&i.IpAddress,
		&i.UserAgent,
		&i.Description,
		&i.Metadata,
		&i.Severity,
		&i.Resolved,
		&i.CreatedAt,
	)
	return i, err
}

const getSuspiciousActivitiesByIP = `-- name: GetSuspiciousActivitiesByIP :many
SELECT id, user_id, activity_type, ip_address, user_agent, description, metadata, severity, resolved, created_at FROM suspicious_activities
WHERE ip_address = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetSuspiciousActivitiesByIPParams struct {
	IpAddress netip.Addr `json:"ip_address"`
	Limit     int32      `json:"limit"`
}

func (q *Queries) GetSuspiciousActivitiesByIP(ctx context.Context, arg GetSuspiciousActivitiesByIPParams) ([]SuspiciousActivity, error) {
	rows, err := q.db.Query(ctx, getSuspiciousActivitiesByIP, arg.IpAddress, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SuspiciousActivity{}
	for rows.Next() {
		var i SuspiciousActivity
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActivityType,
			&i.IpAddress,
			&i.UserAgent,
			&i.Description,
			&i.Metadata,
			&i.Severity,
			&i.Resolved,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSuspiciousActivitiesByUserID = `-- name: GetSuspiciousActivitiesByUserID :many
SELECT id, user_id, activity_type, ip_address, user_agent, description, metadata, severity, resolved, created_at FROM suspicious_activities
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetSuspiciousActivitiesByUserIDParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) GetSuspiciousActivitiesByUserID(ctx context.Context, arg GetSuspiciousActivitiesByUserIDParams) ([]SuspiciousActivity, error) {
	rows, err := q.db.Query(ctx, getSuspiciousActivitiesByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SuspiciousActivity{}
	for rows.Next() {
		var i SuspiciousActivity
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActivityType,
			&i.IpAddress,
			&i.UserAgent,
			&i.Description,
			&i.Metadata,
			&i.Severity,
			&i.Resolved,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSuspiciousActivityCountByIP = `-- name: GetSuspiciousActivityCountByIP :one
SELECT COUNT(*) FROM suspicious_activities
WHERE ip_address = $1
AND created_at > NOW() - INTERVAL '24 hours'
`

func (q *Queries) GetSuspiciousActivityCountByIP(ctx context.Context, ipAddress netip.Addr) (int64, error) {
	row := q.db.QueryRow(ctx, getSuspiciousActivityCountByIP, ipAddress)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSuspiciousActivityCountByUser = `-- name: GetSuspiciousActivityCountByUser :one
SELECT COUNT(*) FROM suspicious_activities
WHERE user_id = $1
AND created_at > NOW() - INTERVAL '24 hours'
`

func (q *Queries) GetSuspiciousActivityCountByUser(ctx context.Context, userID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getSuspiciousActivityCountByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUnresolvedSuspiciousActivities = `-- name: GetUnresolvedSuspiciousActivities :many
SELECT id, user_id, activity_type, ip_address, user_agent, description, metadata, severity, resolved, created_at FROM suspicious_activities
WHERE resolved = false
ORDER BY created_at DESC
LIMIT $1
`

func (q *Queries) GetUnresolvedSuspiciousActivities(ctx context.Context, limit int32) ([]SuspiciousActivity, error) {
	rows, err := q.db.Query(ctx, getUnresolvedSuspiciousActivities, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SuspiciousActivity{}
	for rows.Next() {
		var i SuspiciousActivity
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActivityType,
			&i.IpAddress,
			&i.UserAgent,
			&i.Description,
			&i.Metadata,
			&i.Severity,
			&i.Resolved,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resolveSuspiciousActivity = `-- name: ResolveSuspiciousActivity :exec
UPDATE suspicious_activities
SET resolved = true
WHERE id = $1
`

func (q *Queries) ResolveSuspiciousActivity(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, resolveSuspiciousActivity, id)
	return err
}
