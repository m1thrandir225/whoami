// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: oauth_accounts.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOAuthAccount = `-- name: CreateOAuthAccount :one
INSERT INTO oauth_accounts (
    user_id,
    provider,
    provider_user_id,
    email,
    name,
    avatar_url,
    access_token,
    refresh_token,
    token_expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, user_id, provider, provider_user_id, email, name, avatar_url, access_token, refresh_token, token_expires_at, created_at, updated_at
`

type CreateOAuthAccountParams struct {
	UserID         int64       `json:"user_id"`
	Provider       string      `json:"provider"`
	ProviderUserID string      `json:"provider_user_id"`
	Email          pgtype.Text `json:"email"`
	Name           pgtype.Text `json:"name"`
	AvatarUrl      pgtype.Text `json:"avatar_url"`
	AccessToken    pgtype.Text `json:"access_token"`
	RefreshToken   pgtype.Text `json:"refresh_token"`
	TokenExpiresAt *time.Time  `json:"token_expires_at"`
}

func (q *Queries) CreateOAuthAccount(ctx context.Context, arg CreateOAuthAccountParams) (OauthAccount, error) {
	row := q.db.QueryRow(ctx, createOAuthAccount,
		arg.UserID,
		arg.Provider,
		arg.ProviderUserID,
		arg.Email,
		arg.Name,
		arg.AvatarUrl,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenExpiresAt,
	)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOAuthAccount = `-- name: DeleteOAuthAccount :exec
DELETE FROM oauth_accounts
WHERE id = $1 AND user_id = $2
`

type DeleteOAuthAccountParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteOAuthAccount(ctx context.Context, arg DeleteOAuthAccountParams) error {
	_, err := q.db.Exec(ctx, deleteOAuthAccount, arg.ID, arg.UserID)
	return err
}

const deleteOAuthAccountByProvider = `-- name: DeleteOAuthAccountByProvider :exec
DELETE FROM oauth_accounts
WHERE user_id = $1 AND provider = $2
`

type DeleteOAuthAccountByProviderParams struct {
	UserID   int64  `json:"user_id"`
	Provider string `json:"provider"`
}

func (q *Queries) DeleteOAuthAccountByProvider(ctx context.Context, arg DeleteOAuthAccountByProviderParams) error {
	_, err := q.db.Exec(ctx, deleteOAuthAccountByProvider, arg.UserID, arg.Provider)
	return err
}

const getOAuthAccountByEmail = `-- name: GetOAuthAccountByEmail :one
SELECT id, user_id, provider, provider_user_id, email, name, avatar_url, access_token, refresh_token, token_expires_at, created_at, updated_at FROM oauth_accounts
WHERE email = $1 AND provider = $2
`

type GetOAuthAccountByEmailParams struct {
	Email    pgtype.Text `json:"email"`
	Provider string      `json:"provider"`
}

func (q *Queries) GetOAuthAccountByEmail(ctx context.Context, arg GetOAuthAccountByEmailParams) (OauthAccount, error) {
	row := q.db.QueryRow(ctx, getOAuthAccountByEmail, arg.Email, arg.Provider)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOAuthAccountByID = `-- name: GetOAuthAccountByID :one
SELECT id, user_id, provider, provider_user_id, email, name, avatar_url, access_token, refresh_token, token_expires_at, created_at, updated_at FROM oauth_accounts
WHERE id = $1 AND user_id = $2
`

type GetOAuthAccountByIDParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetOAuthAccountByID(ctx context.Context, arg GetOAuthAccountByIDParams) (OauthAccount, error) {
	row := q.db.QueryRow(ctx, getOAuthAccountByID, arg.ID, arg.UserID)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOAuthAccountByProvider = `-- name: GetOAuthAccountByProvider :one
SELECT id, user_id, provider, provider_user_id, email, name, avatar_url, access_token, refresh_token, token_expires_at, created_at, updated_at FROM oauth_accounts
WHERE provider = $1 AND provider_user_id = $2
`

type GetOAuthAccountByProviderParams struct {
	Provider       string `json:"provider"`
	ProviderUserID string `json:"provider_user_id"`
}

func (q *Queries) GetOAuthAccountByProvider(ctx context.Context, arg GetOAuthAccountByProviderParams) (OauthAccount, error) {
	row := q.db.QueryRow(ctx, getOAuthAccountByProvider, arg.Provider, arg.ProviderUserID)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOAuthAccountsByUserID = `-- name: GetOAuthAccountsByUserID :many
SELECT id, user_id, provider, provider_user_id, email, name, avatar_url, access_token, refresh_token, token_expires_at, created_at, updated_at FROM oauth_accounts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetOAuthAccountsByUserID(ctx context.Context, userID int64) ([]OauthAccount, error) {
	rows, err := q.db.Query(ctx, getOAuthAccountsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OauthAccount{}
	for rows.Next() {
		var i OauthAccount
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.ProviderUserID,
			&i.Email,
			&i.Name,
			&i.AvatarUrl,
			&i.AccessToken,
			&i.RefreshToken,
			&i.TokenExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOAuthAccount = `-- name: UpdateOAuthAccount :one
UPDATE oauth_accounts
SET email = $3,
    name = $4,
    avatar_url = $5,
    access_token = $6,
    refresh_token = $7,
    token_expires_at = $8,
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, provider, provider_user_id, email, name, avatar_url, access_token, refresh_token, token_expires_at, created_at, updated_at
`

type UpdateOAuthAccountParams struct {
	ID             int64       `json:"id"`
	UserID         int64       `json:"user_id"`
	Email          pgtype.Text `json:"email"`
	Name           pgtype.Text `json:"name"`
	AvatarUrl      pgtype.Text `json:"avatar_url"`
	AccessToken    pgtype.Text `json:"access_token"`
	RefreshToken   pgtype.Text `json:"refresh_token"`
	TokenExpiresAt *time.Time  `json:"token_expires_at"`
}

func (q *Queries) UpdateOAuthAccount(ctx context.Context, arg UpdateOAuthAccountParams) (OauthAccount, error) {
	row := q.db.QueryRow(ctx, updateOAuthAccount,
		arg.ID,
		arg.UserID,
		arg.Email,
		arg.Name,
		arg.AvatarUrl,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenExpiresAt,
	)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOAuthTokens = `-- name: UpdateOAuthTokens :one
UPDATE oauth_accounts
SET access_token = $3,
    refresh_token = $4,
    token_expires_at = $5,
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, provider, provider_user_id, email, name, avatar_url, access_token, refresh_token, token_expires_at, created_at, updated_at
`

type UpdateOAuthTokensParams struct {
	ID             int64       `json:"id"`
	UserID         int64       `json:"user_id"`
	AccessToken    pgtype.Text `json:"access_token"`
	RefreshToken   pgtype.Text `json:"refresh_token"`
	TokenExpiresAt *time.Time  `json:"token_expires_at"`
}

func (q *Queries) UpdateOAuthTokens(ctx context.Context, arg UpdateOAuthTokensParams) (OauthAccount, error) {
	row := q.db.QueryRow(ctx, updateOAuthTokens,
		arg.ID,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenExpiresAt,
	)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
