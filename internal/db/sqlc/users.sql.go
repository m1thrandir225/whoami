// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users
SET active = TRUE, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    username,
    password_hash,
    role,
    privacy_settings
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, email, username, password_hash, email_verified, active, role, privacy_settings, last_login_at, password_changed_at, created_at, updated_at
`

type CreateUserParams struct {
	Email           string `json:"email"`
	Username        string `json:"username"`
	PasswordHash    string `json:"password_hash"`
	Role            string `json:"role"`
	PrivacySettings []byte `json:"privacy_settings"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
		arg.PrivacySettings,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.PrivacySettings,
		&i.LastLoginAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users
SET active = FALSE, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, username, password_hash, email_verified, active, role, privacy_settings, last_login_at, password_changed_at, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.PrivacySettings,
		&i.LastLoginAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password_hash, email_verified, active, role, privacy_settings, last_login_at, password_changed_at, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.PrivacySettings,
		&i.LastLoginAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, password_hash, email_verified, active, role, privacy_settings, last_login_at, password_changed_at, created_at, updated_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.PrivacySettings,
		&i.LastLoginAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithProfile = `-- name: GetUserWithProfile :one
SELECT u.id, u.email, u.username, u.email_verified, u.active, u.role, u.privacy_settings,  u.created_at,
    u.last_login_at, u.updated_at, up.first_name, up.last_name, up.phone, up.bio
FROM users u
LEFT JOIN user_profiles up ON u.id = up.user_id
WHERE u.id = $1
`

type GetUserWithProfileRow struct {
	ID              int64       `json:"id"`
	Email           string      `json:"email"`
	Username        string      `json:"username"`
	EmailVerified   bool        `json:"email_verified"`
	Active          bool        `json:"active"`
	Role            string      `json:"role"`
	PrivacySettings []byte      `json:"privacy_settings"`
	CreatedAt       time.Time   `json:"created_at"`
	LastLoginAt     *time.Time  `json:"last_login_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	FirstName       pgtype.Text `json:"first_name"`
	LastName        pgtype.Text `json:"last_name"`
	Phone           pgtype.Text `json:"phone"`
	Bio             pgtype.Text `json:"bio"`
}

func (q *Queries) GetUserWithProfile(ctx context.Context, id int64) (GetUserWithProfileRow, error) {
	row := q.db.QueryRow(ctx, getUserWithProfile, id)
	var i GetUserWithProfileRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.PrivacySettings,
		&i.CreatedAt,
		&i.LastLoginAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Bio,
	)
	return i, err
}

const markEmailVerified = `-- name: MarkEmailVerified :exec
UPDATE users
SET email_verified = TRUE, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkEmailVerified(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, markEmailVerified, id)
	return err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users
SET last_login_at = NOW(), updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET email = $2, username = $3, updated_at = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Email, arg.Username)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2, password_changed_at = NOW(), updated_at = NOW()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           int64  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const updateUserPrivacySettings = `-- name: UpdateUserPrivacySettings :exec
UPDATE users
SET privacy_settings = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserPrivacySettingsParams struct {
	ID              int64  `json:"id"`
	PrivacySettings []byte `json:"privacy_settings"`
}

func (q *Queries) UpdateUserPrivacySettings(ctx context.Context, arg UpdateUserPrivacySettingsParams) error {
	_, err := q.db.Exec(ctx, updateUserPrivacySettings, arg.ID, arg.PrivacySettings)
	return err
}

const verifyUserEmail = `-- name: VerifyUserEmail :exec
UPDATE users
SET email_verified = TRUE, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) VerifyUserEmail(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, verifyUserEmail, id)
	return err
}
