// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: account_lockouts.sql

package db

import (
	"context"
	"net/netip"
	"time"
)

const createAccountLockout = `-- name: CreateAccountLockout :one
INSERT INTO account_lockouts (
    user_id,
    ip_address,
    lockout_type,
    expires_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, ip_address, lockout_type, expires_at, created_at
`

type CreateAccountLockoutParams struct {
	UserID      int64       `json:"user_id"`
	IpAddress   *netip.Addr `json:"ip_address"`
	LockoutType string      `json:"lockout_type"`
	ExpiresAt   time.Time   `json:"expires_at"`
}

func (q *Queries) CreateAccountLockout(ctx context.Context, arg CreateAccountLockoutParams) (AccountLockout, error) {
	row := q.db.QueryRow(ctx, createAccountLockout,
		arg.UserID,
		arg.IpAddress,
		arg.LockoutType,
		arg.ExpiresAt,
	)
	var i AccountLockout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.LockoutType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccountLockoutByID = `-- name: DeleteAccountLockoutByID :exec
DELETE FROM account_lockouts
WHERE id = $1
`

func (q *Queries) DeleteAccountLockoutByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccountLockoutByID, id)
	return err
}

const deleteExpiredLockouts = `-- name: DeleteExpiredLockouts :exec
DELETE FROM account_lockouts
WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredLockouts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredLockouts)
	return err
}

const getAccountLockoutByIP = `-- name: GetAccountLockoutByIP :one
SELECT id, user_id, ip_address, lockout_type, expires_at, created_at FROM account_lockouts
WHERE ip_address = $1
AND expires_at > NOW()
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetAccountLockoutByIP(ctx context.Context, ipAddress *netip.Addr) (AccountLockout, error) {
	row := q.db.QueryRow(ctx, getAccountLockoutByIP, ipAddress)
	var i AccountLockout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.LockoutType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountLockoutByUserAndIP = `-- name: GetAccountLockoutByUserAndIP :one
SELECT id, user_id, ip_address, lockout_type, expires_at, created_at FROM account_lockouts
WHERE user_id = $1
AND ip_address = $2
AND expires_at > NOW()
ORDER BY created_at DESC
LIMIT 1
`

type GetAccountLockoutByUserAndIPParams struct {
	UserID    int64       `json:"user_id"`
	IpAddress *netip.Addr `json:"ip_address"`
}

func (q *Queries) GetAccountLockoutByUserAndIP(ctx context.Context, arg GetAccountLockoutByUserAndIPParams) (AccountLockout, error) {
	row := q.db.QueryRow(ctx, getAccountLockoutByUserAndIP, arg.UserID, arg.IpAddress)
	var i AccountLockout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.LockoutType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountLockoutByUserID = `-- name: GetAccountLockoutByUserID :one
SELECT id, user_id, ip_address, lockout_type, expires_at, created_at FROM account_lockouts
WHERE user_id = $1
AND expires_at > NOW()
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetAccountLockoutByUserID(ctx context.Context, userID int64) (AccountLockout, error) {
	row := q.db.QueryRow(ctx, getAccountLockoutByUserID, userID)
	var i AccountLockout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.LockoutType,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
